# Sudoku Game

from tkinter import *
from tkinter import messagebox
from tkinter import filedialog
import random


class SudokuSolver:
    def __init__(self):
        self.set_zero()
        self.solve()

    def set_zero(self):
        for i in range(9):
            for j in range(9):
                if filledBoard[i][j].get() not in ["1", "2", "3", "4", "5", "6", "7", "8", "9"]:
                    filledBoard[i][j].set(0)

    def solve(self):
        findempty = self.emptyCell()

        if not findempty:
            return True
        else:
            row, column = findempty

        for i in range(1, 10):
            if self.is_valid(i, (row, column)):
                filledBoard[row][column].set(i)
                if self.solve():
                    return True
                filledBoard[row][column].set(0)

        return False

    def is_valid(self, num, pos):
        for i in range(9):
            if filledBoard[pos[0]][i].get() == str(num):
                return False

        for i in range(9):
            if filledBoard[i][pos[1]].get() == str(num):
                return False

        row = pos[0] // 3
        column = pos[1] // 3

        for i in range(row * 3, (row * 3) + 3):
            for j in range(column * 3, (column * 3) + 3):
                if filledBoard[i][j].get() == str(num):
                    return False

        return True

    def emptyCell(self):
        for row in range(9):
            for column in range(9):
                if filledBoard[row][column].get() == "0":
                    return row, column

        return None


class GUI:
    def __init__(self, window):
        self.window = window
        window.title("Sudoku Game")
        self.new_puzzle()

        self.selected_option = IntVar()
        self.selected_option.set(-1)
        self.R1 = Radiobutton(root, text="E", value=30, font=("Arial", 8), bg="white", variable=self.selected_option)
        self.R1.grid(column=3, row=9)
        self.R2 = Radiobutton(root, text="M", value=40, font=("Arial", 8), bg="white", variable=self.selected_option)
        self.R2.grid(column=4, row=9)
        self.R3 = Radiobutton(root, text="H", value=50, font=("Arial", 8), bg="white", variable=self.selected_option)
        self.R3.grid(column=5, row=9)

        self.create = Button(root, text="Create", font=("Arial", 8), command=self.generate, bg="white",
                             state="normal")
        self.create.grid(column=4, row=10)
        self.check = Button(root, width=5, text="Check", font=("Arial", 8), command=self.check, bg="white")
        self.check.grid(column=4, row=11)
        self.solve = Button(root, width=5, text="Solve", font=("Arial", 8), command=self.Solve, bg="white",
                            state="disabled")
        self.solve.grid(column=4, row=12)
        self.clear = Button(root, width=5, text="Clear", font=("Arial", 8), command=self.Clear, bg="white")
        self.clear.grid(column=4, row=13)
        self.load = Button(root, width=5, text="Load", font=("Arial", 8), command=self.Load, bg="white")
        self.load.grid(column=4, row=14)

    def new_puzzle(self):
        self.board = []

        for row in range(9):
            self.board += [["", "", "", "", "", "", "", "", ""]]

        for row in range(9):
            for col in range(9):
                if (row < 3 or row > 5) and (col < 3 or col > 5):
                    color = "white"
                elif (row >= 3 and row < 6) and (col >= 3 and col < 6):
                    color = "white"
                else:
                    color = "#e0cbe0"

                self.board[row][col] = Entry(root, width=2, font=("Arial", 20), bg=color, borderwidth=0.5, fg="#052d7f",
                                             textvariable=filledBoard[row][col])
                self.board[row][col].grid(row=row, column=col)

    def generate(self):
        self.new_puzzle()
        self.create.config(state="disabled")
        self.solve.config(state="normal")
        selected_cells = []

        for i in range(1):
            row = random.randint(0, 8)
            col = random.randint(0, 8)
            num = random.randint(1, 9)
            while self.check_duplicate(row, col, num) or (row, col) in selected_cells:
                row = random.randint(0, 8)
                col = random.randint(0, 8)
                num = random.randint(1, 9)
            filledBoard[row][col].set(num)
            selected_cells.append((row, col))

        SudokuSolver()

        count_selected = 0

        if self.selected_option.get() == -1:
            self.selected_option.set(30)

        while count_selected < self.selected_option.get():
            row = random.randint(0, 8)
            col = random.randint(0, 8)
            if (row, col) not in selected_cells:
                filledBoard[row][col].set("")
                self.board[row][col].config(fg="black")
                selected_cells.append((row, col))
                count_selected += 1

    def Load(self):
        messagebox.showinfo("Notice", "Upload Sudoku file.")
        file_path = filedialog.askopenfilename()

        if file_path:
            with open(file_path, "r") as f:
                content = f.read()
                for row, line in enumerate(content.split("\n")):
                    for col, num in enumerate(line.split(",")):
                        filledBoard[row][col] .set(num.strip())
            for row in range(9):
                for col in range(9):
                    num = filledBoard[row][col].get()
                    if num != '':
                        num = num.replace("0", "")
                        self.board[row][col].config(fg='#052d7f')
                        self.board[row][col].delete(0, END)
                        self.board[row][col].insert(0, num)
                    else:
                        self.board[row][col].config(fg="black")

        self.solve.config(state="normal")

    def check_duplicate(self, row, col, num):
        for i in range(9):
            if filledBoard[row][i].get() == str(num) and i != col:
                return True

        for i in range(9):
            if filledBoard[i][col].get() == str(num) and i != row:
                return True

        block_row = row // 3
        block_col = col // 3

        for i in range(block_row * 3, block_row * 3 + 3):
            for j in range(block_col * 3, block_col * 3 + 3):
                if filledBoard[i][j].get() == str(num) and (i != row or j != col):
                    return True

        return False

    def check(self):
        for row in range(9):
            for column in range(9):
                if filledBoard[row][column].get() == '':
                    return messagebox.showwarning("Error", "Each row and column \nneeds to be filled out!")
                elif (int(filledBoard[row][column].get()) > 9) or (int(filledBoard[row][column].get()) < 0):
                    return messagebox.showwarning("Error", "Numbers must be in the range 1 to 9.")

        for column in range(9):
            values = [filledBoard[row][column].get() for row in range(9) if filledBoard[row][column].get()]

            if len(set(values)) != len(values):
                return messagebox.showerror("Error", "Incorrect solution!")

        messagebox.showinfo("Success", "That's True!")
        quit()
        return


    def Solve(self):
        for row in range(9):
            for col in range(9):
                num = filledBoard[row][col].get()
                if num != '':
                    if self.check_duplicate(row, col, int(num)):
                        return messagebox.showerror("Error", "ROW and COLUMNS and GRIDS can't contain more than \n"
                                                             "one of the same numbers from one to nine!")
                    elif int(num) > 9 or int(num) < 0:
                        return messagebox.showerror("Error", "Numbers must be in the range 1 to 9!")

        SudokuSolver()

    def Clear(self):
        for row in range(9):
            for col in range(9):
                filledBoard[row][col].set("")


root = Tk()
root.resizable(False, False)
root.geometry("317x475")
root.configure(bg="white")
filledBoard = []

for row in range(9):
    filledBoard += [["", "", "", "", "", "", "", "", ""]]

for row in range(9):
    for col in range(9):
        filledBoard[row][col] = StringVar(root)

GUI(root)
root.mainloop()
